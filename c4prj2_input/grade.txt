Grading at Mon Sep 24 16:30:58 UTC 2018
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==390== Memcheck, a memory error detector
==390== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==390== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==390== Command: ./tester hands.txt draw.txt
==390== Parent PID: 389
==390== 
==390== Invalid read of size 8
==390==    at 0x400FAE: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==390==    by 0x401B6F: main (test-input.c:81)
==390==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==390== 
==390== 
==390== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==390==  Access not within mapped region at address 0x8
==390==    at 0x400FAE: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==390==    by 0x401B6F: main (test-input.c:81)
==390==  If you believe this happened as a result of a stack
==390==  overflow in your program's main thread (unlikely but
==390==  possible), you can try to increase the size of the
==390==  main thread stack using the --main-stacksize= flag.
==390==  The main thread stack size used in this run was 8388608.
==390== 
==390== HEAP SUMMARY:
==390==     in use at exit: 184 bytes in 14 blocks
==390==   total heap usage: 28 allocs, 14 frees, 14,104 bytes allocated
==390== 
==390== LEAK SUMMARY:
==390==    definitely lost: 0 bytes in 0 blocks
==390==    indirectly lost: 0 bytes in 0 blocks
==390==      possibly lost: 0 bytes in 0 blocks
==390==    still reachable: 184 bytes in 14 blocks
==390==         suppressed: 0 bytes in 0 blocks
==390== Rerun with --leak-check=full to see details of leaked memory
==390== 
==390== For counts of detected and suppressed errors, rerun with: -v
==390== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==395== Memcheck, a memory error detector
==395== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==395== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==395== Command: ./tester hands.txt draw.txt
==395== Parent PID: 394
==395== 
==395== Invalid read of size 8
==395==    at 0x400FAE: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x401B6F: main (test-input.c:81)
==395==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==395== 
==395== 
==395== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==395==  Access not within mapped region at address 0x8
==395==    at 0x400FAE: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x401B6F: main (test-input.c:81)
==395==  If you believe this happened as a result of a stack
==395==  overflow in your program's main thread (unlikely but
==395==  possible), you can try to increase the size of the
==395==  main thread stack using the --main-stacksize= flag.
==395==  The main thread stack size used in this run was 8388608.
==395== 
==395== HEAP SUMMARY:
==395==     in use at exit: 616 bytes in 41 blocks
==395==   total heap usage: 79 allocs, 38 frees, 15,496 bytes allocated
==395== 
==395== LEAK SUMMARY:
==395==    definitely lost: 0 bytes in 0 blocks
==395==    indirectly lost: 0 bytes in 0 blocks
==395==      possibly lost: 0 bytes in 0 blocks
==395==    still reachable: 616 bytes in 41 blocks
==395==         suppressed: 0 bytes in 0 blocks
==395== Rerun with --leak-check=full to see details of leaked memory
==395== 
==395== For counts of detected and suppressed errors, rerun with: -v
==395== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==401== Memcheck, a memory error detector
==401== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==401== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==401== Command: ./tester h.txt d.txt
==401== Parent PID: 400
==401== 
==401== Invalid read of size 8
==401==    at 0x400FAE: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x401B6F: main (test-input.c:81)
==401==  Address 0x5205958 is 8 bytes after a block of size 16 alloc'd
==401==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==401==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==401==    by 0x400EB0: add_future_card (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x400C41: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x400DEC: read_input (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x401A95: main (test-input.c:69)
==401== 
==401== Invalid read of size 8
==401==    at 0x400F71: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x401B6F: main (test-input.c:81)
==401==  Address 0x5205960 is 16 bytes after a block of size 16 alloc'd
==401==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==401==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==401==    by 0x400EB0: add_future_card (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x400C41: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x400DEC: read_input (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x401A95: main (test-input.c:69)
==401== 
==401== Invalid write of size 8
==401==    at 0x400F94: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x401B6F: main (test-input.c:81)
==401==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==401== 
==401== 
==401== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==401==  Access not within mapped region at address 0x0
==401==    at 0x400F94: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==401==    by 0x401B6F: main (test-input.c:81)
==401==  If you believe this happened as a result of a stack
==401==  overflow in your program's main thread (unlikely but
==401==  possible), you can try to increase the size of the
==401==  main thread stack using the --main-stacksize= flag.
==401==  The main thread stack size used in this run was 8388608.
==401== 
==401== HEAP SUMMARY:
==401==     in use at exit: 1,008 bytes in 68 blocks
==401==   total heap usage: 124 allocs, 56 frees, 16,176 bytes allocated
==401== 
==401== LEAK SUMMARY:
==401==    definitely lost: 32 bytes in 4 blocks
==401==    indirectly lost: 0 bytes in 0 blocks
==401==      possibly lost: 0 bytes in 0 blocks
==401==    still reachable: 976 bytes in 64 blocks
==401==         suppressed: 0 bytes in 0 blocks
==401== Rerun with --leak-check=full to see details of leaked memory
==401== 
==401== For counts of detected and suppressed errors, rerun with: -v
==401== ERROR SUMMARY: 4 errors from 3 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==407== Memcheck, a memory error detector
==407== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==407== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==407== Command: ./tester i1 i2
==407== Parent PID: 406
==407== 
==407== Invalid read of size 8
==407==    at 0x400FAE: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x401B6F: main (test-input.c:81)
==407==  Address 0x5205708 is 8 bytes after a block of size 16 alloc'd
==407==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==407==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==407==    by 0x400EB0: add_future_card (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x400C41: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x400DEC: read_input (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x401A95: main (test-input.c:69)
==407== 
==407== Invalid read of size 8
==407==    at 0x400F71: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x401B6F: main (test-input.c:81)
==407==  Address 0x5205710 is 16 bytes after a block of size 16 alloc'd
==407==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==407==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==407==    by 0x400EB0: add_future_card (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x400C41: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x400DEC: read_input (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x401A95: main (test-input.c:69)
==407== 
==407== Invalid write of size 8
==407==    at 0x400F94: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x401B6F: main (test-input.c:81)
==407==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==407== 
==407== 
==407== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==407==  Access not within mapped region at address 0x0
==407==    at 0x400F94: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==407==    by 0x401B6F: main (test-input.c:81)
==407==  If you believe this happened as a result of a stack
==407==  overflow in your program's main thread (unlikely but
==407==  possible), you can try to increase the size of the
==407==  main thread stack using the --main-stacksize= flag.
==407==  The main thread stack size used in this run was 8388608.
==407== 
==407== HEAP SUMMARY:
==407==     in use at exit: 2,640 bytes in 171 blocks
==407==   total heap usage: 324 allocs, 153 frees, 24,776 bytes allocated
==407== 
==407== LEAK SUMMARY:
==407==    definitely lost: 232 bytes in 29 blocks
==407==    indirectly lost: 0 bytes in 0 blocks
==407==      possibly lost: 0 bytes in 0 blocks
==407==    still reachable: 2,408 bytes in 142 blocks
==407==         suppressed: 0 bytes in 0 blocks
==407== Rerun with --leak-check=full to see details of leaked memory
==407== 
==407== For counts of detected and suppressed errors, rerun with: -v
==407== ERROR SUMMARY: 4 errors from 3 contexts (suppressed: 0 from 0)

Overall Grade: F
