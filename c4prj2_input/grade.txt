Grading at Wed Sep  5 00:21:35 UTC 2018
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==4005== Memcheck, a memory error detector
==4005== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4005== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4005== Command: ./tester hands.txt draw.txt
==4005== Parent PID: 4004
==4005== 
==4005== Conditional jump or move depends on uninitialised value(s)
==4005==    at 0x4C2FD15: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4005==    by 0x400D38: read_input (in /graderhome/work/c4prj2_input/tester)
==4005==    by 0x401B79: main (test-input.c:69)
==4005== 
==4005== Invalid write of size 8
==4005==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4005==    by 0x401B79: main (test-input.c:69)
==4005==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4005== 
==4005== 
==4005== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4005==  Access not within mapped region at address 0x0
==4005==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4005==    by 0x401B79: main (test-input.c:69)
==4005==  If you believe this happened as a result of a stack
==4005==  overflow in your program's main thread (unlikely but
==4005==  possible), you can try to increase the size of the
==4005==  main thread stack using the --main-stacksize= flag.
==4005==  The main thread stack size used in this run was 8388608.
==4005== 
==4005== HEAP SUMMARY:
==4005==     in use at exit: 856 bytes in 11 blocks
==4005==   total heap usage: 28 allocs, 17 frees, 9,800 bytes allocated
==4005== 
==4005== LEAK SUMMARY:
==4005==    definitely lost: 0 bytes in 0 blocks
==4005==    indirectly lost: 0 bytes in 0 blocks
==4005==      possibly lost: 0 bytes in 0 blocks
==4005==    still reachable: 856 bytes in 11 blocks
==4005==         suppressed: 0 bytes in 0 blocks
==4005== Rerun with --leak-check=full to see details of leaked memory
==4005== 
==4005== For counts of detected and suppressed errors, rerun with: -v
==4005== Use --track-origins=yes to see where uninitialised values come from
==4005== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==4010== Memcheck, a memory error detector
==4010== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4010== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4010== Command: ./tester hands.txt draw.txt
==4010== Parent PID: 4009
==4010== 
==4010== Conditional jump or move depends on uninitialised value(s)
==4010==    at 0x4C2FD15: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4010==    by 0x400D38: read_input (in /graderhome/work/c4prj2_input/tester)
==4010==    by 0x401B79: main (test-input.c:69)
==4010== 
==4010== Invalid write of size 8
==4010==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4010==    by 0x401B79: main (test-input.c:69)
==4010==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4010== 
==4010== 
==4010== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4010==  Access not within mapped region at address 0x0
==4010==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4010==    by 0x401B79: main (test-input.c:69)
==4010==  If you believe this happened as a result of a stack
==4010==  overflow in your program's main thread (unlikely but
==4010==  possible), you can try to increase the size of the
==4010==  main thread stack using the --main-stacksize= flag.
==4010==  The main thread stack size used in this run was 8388608.
==4010== 
==4010== HEAP SUMMARY:
==4010==     in use at exit: 856 bytes in 11 blocks
==4010==   total heap usage: 28 allocs, 17 frees, 9,800 bytes allocated
==4010== 
==4010== LEAK SUMMARY:
==4010==    definitely lost: 0 bytes in 0 blocks
==4010==    indirectly lost: 0 bytes in 0 blocks
==4010==      possibly lost: 0 bytes in 0 blocks
==4010==    still reachable: 856 bytes in 11 blocks
==4010==         suppressed: 0 bytes in 0 blocks
==4010== Rerun with --leak-check=full to see details of leaked memory
==4010== 
==4010== For counts of detected and suppressed errors, rerun with: -v
==4010== Use --track-origins=yes to see where uninitialised values come from
==4010== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==4016== Memcheck, a memory error detector
==4016== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4016== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4016== Command: ./tester h.txt d.txt
==4016== Parent PID: 4015
==4016== 
==4016== Conditional jump or move depends on uninitialised value(s)
==4016==    at 0x4C2FD15: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4016==    by 0x400D38: read_input (in /graderhome/work/c4prj2_input/tester)
==4016==    by 0x401B79: main (test-input.c:69)
==4016== 
==4016== Invalid write of size 8
==4016==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4016==    by 0x401B79: main (test-input.c:69)
==4016==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4016== 
==4016== 
==4016== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4016==  Access not within mapped region at address 0x0
==4016==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4016==    by 0x401B79: main (test-input.c:69)
==4016==  If you believe this happened as a result of a stack
==4016==  overflow in your program's main thread (unlikely but
==4016==  possible), you can try to increase the size of the
==4016==  main thread stack using the --main-stacksize= flag.
==4016==  The main thread stack size used in this run was 8388608.
==4016== 
==4016== HEAP SUMMARY:
==4016==     in use at exit: 896 bytes in 14 blocks
==4016==   total heap usage: 31 allocs, 17 frees, 9,840 bytes allocated
==4016== 
==4016== LEAK SUMMARY:
==4016==    definitely lost: 16 bytes in 1 blocks
==4016==    indirectly lost: 0 bytes in 0 blocks
==4016==      possibly lost: 0 bytes in 0 blocks
==4016==    still reachable: 880 bytes in 13 blocks
==4016==         suppressed: 0 bytes in 0 blocks
==4016== Rerun with --leak-check=full to see details of leaked memory
==4016== 
==4016== For counts of detected and suppressed errors, rerun with: -v
==4016== Use --track-origins=yes to see where uninitialised values come from
==4016== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==4022== Memcheck, a memory error detector
==4022== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4022== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4022== Command: ./tester i1 i2
==4022== Parent PID: 4021
==4022== 
==4022== Conditional jump or move depends on uninitialised value(s)
==4022==    at 0x4C2FD15: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4022==    by 0x400D38: read_input (in /graderhome/work/c4prj2_input/tester)
==4022==    by 0x401B79: main (test-input.c:69)
==4022== 
==4022== Invalid write of size 8
==4022==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4022==    by 0x401B79: main (test-input.c:69)
==4022==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4022== 
==4022== 
==4022== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4022==  Access not within mapped region at address 0x0
==4022==    at 0x400D6C: read_input (in /graderhome/work/c4prj2_input/tester)
==4022==    by 0x401B79: main (test-input.c:69)
==4022==  If you believe this happened as a result of a stack
==4022==  overflow in your program's main thread (unlikely but
==4022==  possible), you can try to increase the size of the
==4022==  main thread stack using the --main-stacksize= flag.
==4022==  The main thread stack size used in this run was 8388608.
==4022== 
==4022== HEAP SUMMARY:
==4022==     in use at exit: 1,016 bytes in 20 blocks
==4022==   total heap usage: 40 allocs, 20 frees, 10,056 bytes allocated
==4022== 
==4022== LEAK SUMMARY:
==4022==    definitely lost: 64 bytes in 4 blocks
==4022==    indirectly lost: 0 bytes in 0 blocks
==4022==      possibly lost: 0 bytes in 0 blocks
==4022==    still reachable: 952 bytes in 16 blocks
==4022==         suppressed: 0 bytes in 0 blocks
==4022== Rerun with --leak-check=full to see details of leaked memory
==4022== 
==4022== For counts of detected and suppressed errors, rerun with: -v
==4022== Use --track-origins=yes to see where uninitialised values come from
==4022== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
