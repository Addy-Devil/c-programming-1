Grading at Mon Aug 13 22:08:05 UTC 2018
Compiling your code
rm test poker cards.o my-test-main.o *~
Makefile:10: recipe for target 'clean' failed
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==283== Memcheck, a memory error detector
==283== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==283== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==283== Command: ./test-eval inp.1.txt
==283== Parent PID: 282
==283== 
==283== Invalid read of size 4
==283==    at 0x401449: card_ptr_comp (eval.c:13)
==283==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==283==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==283==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==283==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==283==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==283==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==283==    by 0x4E7369E: qsort_r (msort.c:297)
==283==    by 0x401B2E: compare_hands (eval.c:192)
==283==    by 0x402ABB: main (test-eval.c:124)
==283==  Address 0x6 is not stack'd, malloc'd or (recently) free'd
==283== 
==283== 
==283== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==283==  Access not within mapped region at address 0x6
==283==    at 0x401449: card_ptr_comp (eval.c:13)
==283==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==283==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==283==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==283==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==283==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==283==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==283==    by 0x4E7369E: qsort_r (msort.c:297)
==283==    by 0x401B2E: compare_hands (eval.c:192)
==283==    by 0x402ABB: main (test-eval.c:124)
==283==  If you believe this happened as a result of a stack
==283==  overflow in your program's main thread (unlikely but
==283==  possible), you can try to increase the size of the
==283==  main thread stack using the --main-stacksize= flag.
==283==  The main thread stack size used in this run was 8388608.
==283== 
==283== HEAP SUMMARY:
==283==     in use at exit: 896 bytes in 18 blocks
==283==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==283== 
==283== LEAK SUMMARY:
==283==    definitely lost: 0 bytes in 0 blocks
==283==    indirectly lost: 0 bytes in 0 blocks
==283==      possibly lost: 0 bytes in 0 blocks
==283==    still reachable: 896 bytes in 18 blocks
==283==         suppressed: 0 bytes in 0 blocks
==283== Rerun with --leak-check=full to see details of leaked memory
==283== 
==283== For counts of detected and suppressed errors, rerun with: -v
==283== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==288== Memcheck, a memory error detector
==288== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==288== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==288== Command: ./test-eval inp.2.txt
==288== Parent PID: 287
==288== 
==288== Invalid read of size 4
==288==    at 0x401449: card_ptr_comp (eval.c:13)
==288==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==288==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==288==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==288==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==288==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==288==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==288==    by 0x4E7369E: qsort_r (msort.c:297)
==288==    by 0x401B2E: compare_hands (eval.c:192)
==288==    by 0x402ABB: main (test-eval.c:124)
==288==  Address 0x6 is not stack'd, malloc'd or (recently) free'd
==288== 
==288== 
==288== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==288==  Access not within mapped region at address 0x6
==288==    at 0x401449: card_ptr_comp (eval.c:13)
==288==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==288==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==288==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==288==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==288==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==288==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==288==    by 0x4E7369E: qsort_r (msort.c:297)
==288==    by 0x401B2E: compare_hands (eval.c:192)
==288==    by 0x402ABB: main (test-eval.c:124)
==288==  If you believe this happened as a result of a stack
==288==  overflow in your program's main thread (unlikely but
==288==  possible), you can try to increase the size of the
==288==  main thread stack using the --main-stacksize= flag.
==288==  The main thread stack size used in this run was 8388608.
==288== 
==288== HEAP SUMMARY:
==288==     in use at exit: 880 bytes in 17 blocks
==288==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==288== 
==288== LEAK SUMMARY:
==288==    definitely lost: 0 bytes in 0 blocks
==288==    indirectly lost: 0 bytes in 0 blocks
==288==      possibly lost: 0 bytes in 0 blocks
==288==    still reachable: 880 bytes in 17 blocks
==288==         suppressed: 0 bytes in 0 blocks
==288== Rerun with --leak-check=full to see details of leaked memory
==288== 
==288== For counts of detected and suppressed errors, rerun with: -v
==288== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==293== Memcheck, a memory error detector
==293== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==293== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==293== Command: ./test-eval inp.3.txt
==293== Parent PID: 292
==293== 
==293== Invalid read of size 4
==293==    at 0x401452: card_ptr_comp (eval.c:13)
==293==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==293==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==293==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==293==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==293==    by 0x4E7369E: qsort_r (msort.c:297)
==293==    by 0x401B2E: compare_hands (eval.c:192)
==293==    by 0x402ABB: main (test-eval.c:124)
==293==  Address 0x5 is not stack'd, malloc'd or (recently) free'd
==293== 
==293== 
==293== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==293==  Access not within mapped region at address 0x5
==293==    at 0x401452: card_ptr_comp (eval.c:13)
==293==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==293==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==293==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==293==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==293==    by 0x4E7369E: qsort_r (msort.c:297)
==293==    by 0x401B2E: compare_hands (eval.c:192)
==293==    by 0x402ABB: main (test-eval.c:124)
==293==  If you believe this happened as a result of a stack
==293==  overflow in your program's main thread (unlikely but
==293==  possible), you can try to increase the size of the
==293==  main thread stack using the --main-stacksize= flag.
==293==  The main thread stack size used in this run was 8388608.
==293== 
==293== HEAP SUMMARY:
==293==     in use at exit: 864 bytes in 16 blocks
==293==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==293== 
==293== LEAK SUMMARY:
==293==    definitely lost: 0 bytes in 0 blocks
==293==    indirectly lost: 0 bytes in 0 blocks
==293==      possibly lost: 0 bytes in 0 blocks
==293==    still reachable: 864 bytes in 16 blocks
==293==         suppressed: 0 bytes in 0 blocks
==293== Rerun with --leak-check=full to see details of leaked memory
==293== 
==293== For counts of detected and suppressed errors, rerun with: -v
==293== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==298== Memcheck, a memory error detector
==298== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==298== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==298== Command: ./test-eval inp.4.txt
==298== Parent PID: 297
==298== 
==298== Invalid read of size 4
==298==    at 0x401449: card_ptr_comp (eval.c:13)
==298==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==298==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==298==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==298==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==298==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==298==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==298==    by 0x4E7369E: qsort_r (msort.c:297)
==298==    by 0x401B2E: compare_hands (eval.c:192)
==298==    by 0x402ABB: main (test-eval.c:124)
==298==  Address 0x6 is not stack'd, malloc'd or (recently) free'd
==298== 
==298== 
==298== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==298==  Access not within mapped region at address 0x6
==298==    at 0x401449: card_ptr_comp (eval.c:13)
==298==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==298==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==298==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==298==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==298==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==298==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==298==    by 0x4E7369E: qsort_r (msort.c:297)
==298==    by 0x401B2E: compare_hands (eval.c:192)
==298==    by 0x402ABB: main (test-eval.c:124)
==298==  If you believe this happened as a result of a stack
==298==  overflow in your program's main thread (unlikely but
==298==  possible), you can try to increase the size of the
==298==  main thread stack using the --main-stacksize= flag.
==298==  The main thread stack size used in this run was 8388608.
==298== 
==298== HEAP SUMMARY:
==298==     in use at exit: 896 bytes in 18 blocks
==298==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==298== 
==298== LEAK SUMMARY:
==298==    definitely lost: 0 bytes in 0 blocks
==298==    indirectly lost: 0 bytes in 0 blocks
==298==      possibly lost: 0 bytes in 0 blocks
==298==    still reachable: 896 bytes in 18 blocks
==298==         suppressed: 0 bytes in 0 blocks
==298== Rerun with --leak-check=full to see details of leaked memory
==298== 
==298== For counts of detected and suppressed errors, rerun with: -v
==298== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==303== Memcheck, a memory error detector
==303== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==303== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==303== Command: ./test-eval inp.5.txt
==303== Parent PID: 302
==303== 
==303== Invalid read of size 4
==303==    at 0x401452: card_ptr_comp (eval.c:13)
==303==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==303==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==303==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==303==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==303==    by 0x4E7369E: qsort_r (msort.c:297)
==303==    by 0x401B2E: compare_hands (eval.c:192)
==303==    by 0x402ABB: main (test-eval.c:124)
==303==  Address 0x5 is not stack'd, malloc'd or (recently) free'd
==303== 
==303== 
==303== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==303==  Access not within mapped region at address 0x5
==303==    at 0x401452: card_ptr_comp (eval.c:13)
==303==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==303==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==303==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==303==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==303==    by 0x4E7369E: qsort_r (msort.c:297)
==303==    by 0x401B2E: compare_hands (eval.c:192)
==303==    by 0x402ABB: main (test-eval.c:124)
==303==  If you believe this happened as a result of a stack
==303==  overflow in your program's main thread (unlikely but
==303==  possible), you can try to increase the size of the
==303==  main thread stack using the --main-stacksize= flag.
==303==  The main thread stack size used in this run was 8388608.
==303== 
==303== HEAP SUMMARY:
==303==     in use at exit: 864 bytes in 16 blocks
==303==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==303== 
==303== LEAK SUMMARY:
==303==    definitely lost: 0 bytes in 0 blocks
==303==    indirectly lost: 0 bytes in 0 blocks
==303==      possibly lost: 0 bytes in 0 blocks
==303==    still reachable: 864 bytes in 16 blocks
==303==         suppressed: 0 bytes in 0 blocks
==303== Rerun with --leak-check=full to see details of leaked memory
==303== 
==303== For counts of detected and suppressed errors, rerun with: -v
==303== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==308== Memcheck, a memory error detector
==308== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==308== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==308== Command: ./test-eval inp.6.txt
==308== Parent PID: 307
==308== 
==308== Invalid read of size 4
==308==    at 0x401449: card_ptr_comp (eval.c:13)
==308==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==308==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==308==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==308==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==308==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==308==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==308==    by 0x4E7369E: qsort_r (msort.c:297)
==308==    by 0x401B2E: compare_hands (eval.c:192)
==308==    by 0x402ABB: main (test-eval.c:124)
==308==  Address 0x6 is not stack'd, malloc'd or (recently) free'd
==308== 
==308== 
==308== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==308==  Access not within mapped region at address 0x6
==308==    at 0x401449: card_ptr_comp (eval.c:13)
==308==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==308==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==308==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==308==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==308==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==308==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==308==    by 0x4E7369E: qsort_r (msort.c:297)
==308==    by 0x401B2E: compare_hands (eval.c:192)
==308==    by 0x402ABB: main (test-eval.c:124)
==308==  If you believe this happened as a result of a stack
==308==  overflow in your program's main thread (unlikely but
==308==  possible), you can try to increase the size of the
==308==  main thread stack using the --main-stacksize= flag.
==308==  The main thread stack size used in this run was 8388608.
==308== 
==308== HEAP SUMMARY:
==308==     in use at exit: 896 bytes in 18 blocks
==308==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==308== 
==308== LEAK SUMMARY:
==308==    definitely lost: 0 bytes in 0 blocks
==308==    indirectly lost: 0 bytes in 0 blocks
==308==      possibly lost: 0 bytes in 0 blocks
==308==    still reachable: 896 bytes in 18 blocks
==308==         suppressed: 0 bytes in 0 blocks
==308== Rerun with --leak-check=full to see details of leaked memory
==308== 
==308== For counts of detected and suppressed errors, rerun with: -v
==308== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==313== Memcheck, a memory error detector
==313== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==313== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==313== Command: ./test-eval inp.7.txt
==313== Parent PID: 312
==313== 
==313== Invalid read of size 4
==313==    at 0x401449: card_ptr_comp (eval.c:13)
==313==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==313==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==313==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==313==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==313==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==313==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==313==    by 0x4E7369E: qsort_r (msort.c:297)
==313==    by 0x401B2E: compare_hands (eval.c:192)
==313==    by 0x402ABB: main (test-eval.c:124)
==313==  Address 0x7 is not stack'd, malloc'd or (recently) free'd
==313== 
==313== 
==313== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==313==  Access not within mapped region at address 0x7
==313==    at 0x401449: card_ptr_comp (eval.c:13)
==313==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==313==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==313==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==313==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==313==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==313==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==313==    by 0x4E7369E: qsort_r (msort.c:297)
==313==    by 0x401B2E: compare_hands (eval.c:192)
==313==    by 0x402ABB: main (test-eval.c:124)
==313==  If you believe this happened as a result of a stack
==313==  overflow in your program's main thread (unlikely but
==313==  possible), you can try to increase the size of the
==313==  main thread stack using the --main-stacksize= flag.
==313==  The main thread stack size used in this run was 8388608.
==313== 
==313== HEAP SUMMARY:
==313==     in use at exit: 928 bytes in 20 blocks
==313==   total heap usage: 68 allocs, 48 frees, 10,160 bytes allocated
==313== 
==313== LEAK SUMMARY:
==313==    definitely lost: 0 bytes in 0 blocks
==313==    indirectly lost: 0 bytes in 0 blocks
==313==      possibly lost: 0 bytes in 0 blocks
==313==    still reachable: 928 bytes in 20 blocks
==313==         suppressed: 0 bytes in 0 blocks
==313== Rerun with --leak-check=full to see details of leaked memory
==313== 
==313== For counts of detected and suppressed errors, rerun with: -v
==313== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==318== Memcheck, a memory error detector
==318== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==318== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==318== Command: ./test-eval inp.8.txt
==318== Parent PID: 317
==318== 
==318== Invalid read of size 4
==318==    at 0x401449: card_ptr_comp (eval.c:13)
==318==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==318==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==318==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==318==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==318==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==318==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==318==    by 0x4E7369E: qsort_r (msort.c:297)
==318==    by 0x401B2E: compare_hands (eval.c:192)
==318==    by 0x402ABB: main (test-eval.c:124)
==318==  Address 0x6 is not stack'd, malloc'd or (recently) free'd
==318== 
==318== 
==318== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==318==  Access not within mapped region at address 0x6
==318==    at 0x401449: card_ptr_comp (eval.c:13)
==318==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==318==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==318==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==318==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==318==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==318==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==318==    by 0x4E7369E: qsort_r (msort.c:297)
==318==    by 0x401B2E: compare_hands (eval.c:192)
==318==    by 0x402ABB: main (test-eval.c:124)
==318==  If you believe this happened as a result of a stack
==318==  overflow in your program's main thread (unlikely but
==318==  possible), you can try to increase the size of the
==318==  main thread stack using the --main-stacksize= flag.
==318==  The main thread stack size used in this run was 8388608.
==318== 
==318== HEAP SUMMARY:
==318==     in use at exit: 896 bytes in 18 blocks
==318==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==318== 
==318== LEAK SUMMARY:
==318==    definitely lost: 0 bytes in 0 blocks
==318==    indirectly lost: 0 bytes in 0 blocks
==318==      possibly lost: 0 bytes in 0 blocks
==318==    still reachable: 896 bytes in 18 blocks
==318==         suppressed: 0 bytes in 0 blocks
==318== Rerun with --leak-check=full to see details of leaked memory
==318== 
==318== For counts of detected and suppressed errors, rerun with: -v
==318== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==323== Memcheck, a memory error detector
==323== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==323== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==323== Command: ./test-eval inp.9.txt
==323== Parent PID: 322
==323== 
==323== Invalid read of size 4
==323==    at 0x401452: card_ptr_comp (eval.c:13)
==323==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==323==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==323==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==323==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==323==    by 0x4E7369E: qsort_r (msort.c:297)
==323==    by 0x401B2E: compare_hands (eval.c:192)
==323==    by 0x402ABB: main (test-eval.c:124)
==323==  Address 0x5 is not stack'd, malloc'd or (recently) free'd
==323== 
==323== 
==323== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==323==  Access not within mapped region at address 0x5
==323==    at 0x401452: card_ptr_comp (eval.c:13)
==323==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==323==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==323==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==323==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==323==    by 0x4E7369E: qsort_r (msort.c:297)
==323==    by 0x401B2E: compare_hands (eval.c:192)
==323==    by 0x402ABB: main (test-eval.c:124)
==323==  If you believe this happened as a result of a stack
==323==  overflow in your program's main thread (unlikely but
==323==  possible), you can try to increase the size of the
==323==  main thread stack using the --main-stacksize= flag.
==323==  The main thread stack size used in this run was 8388608.
==323== 
==323== HEAP SUMMARY:
==323==     in use at exit: 864 bytes in 16 blocks
==323==   total heap usage: 50 allocs, 34 frees, 9,608 bytes allocated
==323== 
==323== LEAK SUMMARY:
==323==    definitely lost: 0 bytes in 0 blocks
==323==    indirectly lost: 0 bytes in 0 blocks
==323==      possibly lost: 0 bytes in 0 blocks
==323==    still reachable: 864 bytes in 16 blocks
==323==         suppressed: 0 bytes in 0 blocks
==323== Rerun with --leak-check=full to see details of leaked memory
==323== 
==323== For counts of detected and suppressed errors, rerun with: -v
==323== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==328== Memcheck, a memory error detector
==328== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==328== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==328== Command: ./test-eval inp.10.txt
==328== Parent PID: 327
==328== 
==328== Invalid read of size 4
==328==    at 0x401449: card_ptr_comp (eval.c:13)
==328==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==328==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==328==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==328==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==328==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==328==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==328==    by 0x4E7369E: qsort_r (msort.c:297)
==328==    by 0x401B2E: compare_hands (eval.c:192)
==328==    by 0x402ABB: main (test-eval.c:124)
==328==  Address 0x6 is not stack'd, malloc'd or (recently) free'd
==328== 
==328== 
==328== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==328==  Access not within mapped region at address 0x6
==328==    at 0x401449: card_ptr_comp (eval.c:13)
==328==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==328==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==328==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==328==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==328==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==328==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==328==    by 0x4E7369E: qsort_r (msort.c:297)
==328==    by 0x401B2E: compare_hands (eval.c:192)
==328==    by 0x402ABB: main (test-eval.c:124)
==328==  If you believe this happened as a result of a stack
==328==  overflow in your program's main thread (unlikely but
==328==  possible), you can try to increase the size of the
==328==  main thread stack using the --main-stacksize= flag.
==328==  The main thread stack size used in this run was 8388608.
==328== 
==328== HEAP SUMMARY:
==328==     in use at exit: 896 bytes in 18 blocks
==328==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==328== 
==328== LEAK SUMMARY:
==328==    definitely lost: 0 bytes in 0 blocks
==328==    indirectly lost: 0 bytes in 0 blocks
==328==      possibly lost: 0 bytes in 0 blocks
==328==    still reachable: 896 bytes in 18 blocks
==328==         suppressed: 0 bytes in 0 blocks
==328== Rerun with --leak-check=full to see details of leaked memory
==328== 
==328== For counts of detected and suppressed errors, rerun with: -v
==328== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
